// Generated by Haxe 4.3.2
(function ($global) { "use strict";
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var _g = new haxe_ds_StringMap();
	_g.h["Explicit"] = [{ label : "Width", type : "number", min : 0, step : 1.0},{ label : "Height", type : "number", min : 0, step : 1.0}];
	_g.h["MatchBackground"] = [];
	var _g1 = new haxe_ds_StringMap();
	_g1.h["None"] = [];
	_g1.h["FadeIn"] = [{ label : "Fade In Speed", type : "number", min : 0, step : 0.1}];
	var schema = ludi_forms_FormSchema.fromDynamicArray([{ label : "Background Image", type : "text", placeholder : "Path to background image (e.g., assets/bg.png)"},{ label : "Background Opacity", type : "number", min : 0.0, max : 1.0, step : 0.1},{ label : "Padding Top", type : "number", min : 0, step : 1},{ label : "Padding Bottom", type : "number", min : 0, step : 1},{ label : "Padding Left", type : "number", min : 0, step : 1},{ label : "Padding Right", type : "number", min : 0, step : 1},{ label : "Size", type : "dropdown", options : ["Explicit","MatchBackground"], subformSchema : _g},{ label : "Font Family", type : "text", placeholder : "e.g., Arial"},{ label : "Font Size", type : "number", min : 1, step : 1},{ label : "Text Color", type : "text", placeholder : "Hex color (e.g., 0xFFFFFF)"},{ label : "Line Spacing", type : "number", min : 0, step : 0.1},{ label : "Position", type : "dropdown", options : ["Top","Center","Bottom"]},{ label : "Offset X", type : "number", step : 1},{ label : "Offset Y", type : "number", step : 1},{ label : "Text Effect", type : "dropdown", options : ["None","FadeIn"], subformSchema : _g1},{ label : "Text Speed", type : "number", min : 0, step : 1.0},{ label : "Has Name Box", type : "checkbox"},{ label : "Has Cursor", type : "checkbox"},{ label : "Test File", type : "file"},{ label : "Submit", type : "button"}]);
	var nameBoxSubform = ludi_forms_FormSchema.fromDynamicArray([{ label : "Name Box Background Color", type : "text", placeholder : "Hex color (e.g., 0x333333)"},{ label : "Name Box Text Color", type : "text", placeholder : "Hex color (e.g., 0xFFFFFF)"},{ label : "Name Box Font Size", type : "number", min : 1, step : 1},{ label : "Name Box Padding Top", type : "number", min : 0, step : 1},{ label : "Name Box Padding Bottom", type : "number", min : 0, step : 1},{ label : "Name Box Padding Left", type : "number", min : 0, step : 1},{ label : "Name Box Padding Right", type : "number", min : 0, step : 1},{ label : "Name Box Offset X", type : "number", step : 1},{ label : "Name Box Offset Y", type : "number", step : 1}]);
	var _g = new haxe_ds_StringMap();
	_g.h["AfterTextEnd"] = [];
	_g.h["Specific"] = [{ label : "Cursor X", type : "number", step : 1},{ label : "Cursor Y", type : "number", step : 1}];
	var cursorSubform = ludi_forms_FormSchema.fromDynamicArray([{ label : "Cursor Sprite Path", type : "text", placeholder : "Path to cursor image"},{ label : "Cursor Width", type : "number", min : 0, step : 1},{ label : "Cursor Height", type : "number", min : 0, step : 1},{ label : "Cursor Positioning", type : "dropdown", options : ["AfterTextEnd","Specific"], subformSchema : _g},{ label : "Cursor Offset X", type : "number", step : 1},{ label : "Cursor Offset Y", type : "number", step : 1},{ label : "Cursor Animation Type", type : "dropdown", options : ["None","Bounce","Fade","Pulse"]},{ label : "Cursor Animation Speed", type : "number", min : 0, step : 0.1},{ label : "Cursor Is Visible", type : "checkbox"}]);
	var form = ludi_forms_Form._new(schema);
	var form1 = form;
	ludi_forms_Form.onChange(form1,"Has Name Box",function() {
		var val = ludi_forms_Form.getValues(form1).h["Has Name Box"].value;
		if(val == true) {
			ludi_forms_Form.setSubform(form1,"Has Name Box",nameBoxSubform);
		} else {
			ludi_forms_Form.removeSubform(form1,"Has Name Box");
		}
	});
	ludi_forms_Form.onChange(form1,"Has Cursor",function() {
		var val = ludi_forms_Form.getValues(form1).h["Has Cursor"].value;
		if(val == true) {
			ludi_forms_Form.setSubform(form1,"Has Cursor",cursorSubform);
		} else {
			ludi_forms_Form.removeSubform(form1,"Has Cursor");
		}
	});
	ludi_forms_Form.onChange(form1,"Submit",function() {
		var tmp = ludi_forms_Form.getValues(form1);
		console.log("src/Main.hx:128:",tmp == null ? "null" : haxe_ds_StringMap.stringify(tmp.h));
	});
	var form2 = form;
	$("body").append(form2);
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.stringify = function(h) {
	var s = "[";
	var first = true;
	for (var key in h) {
		if (first) first = false; else s += ',';
		s += key + ' => ' + Std.string(h[key]);
	}
	return s + "]";
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var ludi_forms_FormSchema = {};
ludi_forms_FormSchema.fromDynamicArray = function(dyn) {
	return dyn;
};
var ludi_forms_FileInputControl = function(onChange) {
	var _gthis = this;
	this.filename = "";
	this.bytes = null;
	this.element = $("<div class=\"file-input-control\">");
	var input = $("<input type=\"file\" style=\"display: none;\">");
	var uploadBtn = $("<button class=\"upload-btn\">Upload File</button>");
	var nameDisplay = $("<span class=\"file-name\">No file selected</span>");
	var preview = $("<div class=\"file-preview\"></div>");
	this.element.append(input).append(uploadBtn).append(nameDisplay).append(preview);
	uploadBtn.on("click",null,function(e) {
		e.preventDefault();
		input.click();
	});
	input.on("change",null,function() {
		var file = input.get(0).files[0];
		if(file != null) {
			var reader = new FileReader();
			reader.onload = function(e) {
				var arrayBuffer = reader.result;
				_gthis.bytes = haxe_io_Bytes.ofData(arrayBuffer);
				_gthis.filename = file.name;
				nameDisplay.text(_gthis.filename);
				_gthis.updatePreview(preview,file.type,_gthis.bytes);
				onChange();
			};
			reader.readAsArrayBuffer(file);
		}
	});
};
ludi_forms_FileInputControl.__name__ = true;
ludi_forms_FileInputControl.prototype = {
	updatePreview: function(preview,mimeType,bytes) {
		preview.empty();
		if(mimeType.indexOf("image/") == 0 && bytes != null) {
			var img = $("<img class=\"thumbnail\">");
			var blob = new Blob([bytes.b.bufferValue]);
			var url = URL.createObjectURL(blob);
			var tempImg = new Image();
			tempImg.onload = function() {
				var width = tempImg.width;
				var height = tempImg.height;
				var maxDimension = 100;
				var scaledWidth = width;
				var scaledHeight = height;
				if(width > height) {
					if(width > maxDimension) {
						scaledWidth = maxDimension;
						scaledHeight = Math.round(height * maxDimension / width);
					}
				} else if(height > maxDimension) {
					scaledHeight = maxDimension;
					scaledWidth = Math.round(width * maxDimension / height);
				}
				img.css({ "width" : scaledWidth + "px", "height" : scaledHeight + "px", "max-width" : "100px", "max-height" : "100px"});
				URL.revokeObjectURL(url);
				img.attr("src",URL.createObjectURL(blob));
				preview.append(img);
			};
			tempImg.src = url;
		} else {
			var icon = $("<div class=\"file-icon\">📄</div>");
			icon.css({ "width" : "100px", "height" : "100px", "font-size" : "50px", "display" : "flex", "align-items" : "center", "justify-content" : "center"});
			preview.append(icon);
		}
	}
	,setAccept: function(accept) {
		this.element.find("input").attr("accept",accept);
	}
};
var ludi_forms_Form = {};
ludi_forms_Form.initRenderers = function() {
	ludi_forms_Form.renderers = [{ type : "file", renderer : function(form,item) {
		var fileItem = item;
		var container = $("<div class=\"ludi-form ludi-form-control-container\">");
		var fileControl = new ludi_forms_FileInputControl(function() {
			ludi_forms_Form.handleChange(form,item.label);
		});
		if(fileItem.accept != null) {
			fileControl.setAccept(fileItem.accept);
		}
		container.append(item.label).append(fileControl.element);
		return container;
	}, getValue : function(_,_1,control) {
		var fileControl = control.find(".file-input-control").get(0);
		if(fileControl != null) {
			var ctrl = Reflect.field(fileControl,"__fileControl");
			if(ctrl != null) {
				return { filename : ctrl.filename, bytes : ctrl.bytes};
			}
		}
		return null;
	}, setValue : function(_,_1,control,value) {
		var fileControl = control.find(".file-input-control").get(0);
		if(fileControl != null && value != null) {
			var ctrl = Reflect.field(fileControl,"__fileControl");
			if(ctrl == null) {
				ctrl = new ludi_forms_FileInputControl(function() {
				});
				fileControl["__fileControl"] = ctrl;
				control.find(".file-input-control").replaceWith(ctrl.element);
			}
			ctrl.filename = value.filename;
			ctrl.bytes = value.bytes;
			ctrl.element.find(".file-name").text(value.filename);
			if(value.bytes != null) {
				ctrl.updatePreview(ctrl.element.find(".file-preview"),ludi_forms_Form.guessMimeType(value.filename),value.bytes);
			}
		}
	}},{ type : "text", renderer : function(form,item) {
		var textItem = item;
		var input = $("<input class=\"ludi-form ludi-form-text\" type=\"text\">");
		if(textItem.placeholder != null) {
			input.attr("placeholder",textItem.placeholder);
		}
		input.on("input",null,function() {
			ludi_forms_Form.handleChange(form,item.label);
		});
		return $("<div class=\"ludi-form ludi-form-control-container\">").append(item.label).append(input);
	}, getValue : function(_,_1,control) {
		return control.find("input").val();
	}, setValue : function(_,_1,control,value) {
		control.find("input").val(value);
	}},{ type : "checkbox", renderer : function(form,item) {
		var input = $("<input class=\"ludi-form ludi-form-checkbox\" type=\"checkbox\">");
		input.on("change",null,function() {
			ludi_forms_Form.handleChange(form,item.label);
		});
		return $("<div class=\"ludi-form ludi-form-control-container\">").append(item.label).append(input);
	}, getValue : function(_,_1,control) {
		return control.find("input").is(":checked");
	}, setValue : function(_,_1,control,value) {
		control.find("input").prop("checked",value);
	}},{ type : "number", renderer : function(form,item) {
		var numItem = item;
		var input = $("<input class=\"ludi-form ludi-form-number\" type=\"number\">");
		if(numItem.min != null) {
			input.attr("min",numItem.min == null ? "null" : "" + numItem.min);
		}
		if(numItem.max != null) {
			input.attr("max",numItem.max == null ? "null" : "" + numItem.max);
		}
		if(numItem.step != null) {
			input.attr("step",numItem.step == null ? "null" : "" + numItem.step);
		}
		input.on("input",null,function() {
			ludi_forms_Form.handleChange(form,item.label);
		});
		return $("<div class=\"ludi-form ludi-form-control-container\">").append(item.label).append(input);
	}, getValue : function(_,_1,control) {
		return parseFloat(control.find("input").val());
	}, setValue : function(_,_1,control,value) {
		control.find("input").val(value);
	}},{ type : "dropdown", renderer : function(form,item) {
		var dropItem = item;
		var select = $("<select class=\"ludi-form ludi-form-select\">");
		var blankOption = $("<option class=\"ludi-form ludi-form-option\" value=\"\">");
		select.append(blankOption);
		if(dropItem.options != null && ((dropItem.options) instanceof Array)) {
			var _g = 0;
			var _g1 = dropItem.options;
			while(_g < _g1.length) {
				var option = _g1[_g];
				++_g;
				select.append($("<option class=\"ludi-form ludi-form-option\">").val(option).text(option));
			}
		}
		select.on("change",null,function() {
			ludi_forms_Form.handleChange(form,item.label);
			var fields = ludi_forms_util_StructuredJQuery.getFields(form);
			var val = select.val();
			if(val != "" && blankOption.parent().length > 0) {
				blankOption.remove();
			}
			if(Object.prototype.hasOwnProperty.call(fields.subforms.h,item.label)) {
				ludi_forms_Form.removeSubform(form,item.label);
			}
			if(dropItem.subformSchema != null && Object.prototype.hasOwnProperty.call(dropItem.subformSchema.h,val)) {
				ludi_forms_Form.setSubform(form,item.label,dropItem.subformSchema.h[val]);
			}
		});
		return $("<div class=\"ludi-form ludi-form-control-container\">").append(item.label).append(select);
	}, getValue : function(_,_1,control) {
		return control.find("select").val();
	}, setValue : function(_,_1,control,value) {
		var select = control.find("select");
		if(value != "" && select.find("option[value=\"\"]").length > 0) {
			select.find("option[value=\"\"]").remove();
		}
		select.val(value);
	}},{ type : "button", renderer : function(form,item) {
		var button = $("<button class=\"ludi-form ludi-form-button\">").text(item.label);
		button.on("click",null,function() {
			ludi_forms_Form.handleChange(form,item.label);
		});
		return button;
	}, getValue : function(_,_1,_2) {
		return true;
	}, setValue : function(_,_1,_2,_3) {
	}}];
	ludi_forms_Form.hasInitialized = true;
};
ludi_forms_Form.guessMimeType = function(filename) {
	var ext = HxOverrides.substr(filename,filename.lastIndexOf("."),null).toLowerCase();
	switch(ext) {
	case ".gif":
		return "image/gif";
	case ".jpeg":case ".jpg":
		return "image/jpeg";
	case ".pdf":
		return "application/pdf";
	case ".png":
		return "image/png";
	default:
		return "application/octet-stream";
	}
};
ludi_forms_Form._new = function(schema) {
	if(!ludi_forms_Form.hasInitialized) {
		ludi_forms_Form.initRenderers();
	}
	var this1 = $("<div class=\"ludi-form ludi-form-form-container\">");
	var controls = new haxe_ds_StringMap();
	var changeCallbacks = new haxe_ds_StringMap();
	var validators = new haxe_ds_StringMap();
	ludi_forms_util_StructuredJQuery.setFields(this1,{ schema : schema, subforms : new haxe_ds_StringMap(), controls : controls, changeCallbacks : changeCallbacks, validators : validators});
	var _g = 0;
	while(_g < schema.length) {
		var item = schema[_g];
		++_g;
		var control = ludi_forms_Form.renderItem(this1,item);
		controls.h[item.label] = control;
		this1.append(control);
	}
	return this1;
};
ludi_forms_Form.renderItem = function(this1,item) {
	var _g = 0;
	var _g1 = ludi_forms_Form.renderers;
	while(_g < _g1.length) {
		var renderer = _g1[_g];
		++_g;
		if(renderer.type == item.type) {
			return renderer.renderer(this1,item);
		}
	}
	return $("<div>").text("Unknown type: " + item.type);
};
ludi_forms_Form.handleChange = function(this1,label) {
	var fields = ludi_forms_util_StructuredJQuery.getFields(this1);
	if(Object.prototype.hasOwnProperty.call(fields.changeCallbacks.h,label)) {
		fields.changeCallbacks.h[label]();
	}
};
ludi_forms_Form.onChange = function(this1,itemLabel,cb) {
	var fields = ludi_forms_util_StructuredJQuery.getFields(this1);
	fields.changeCallbacks.h[itemLabel] = cb;
	ludi_forms_util_StructuredJQuery.setFields(this1,fields);
};
ludi_forms_Form.setSubform = function(this1,itemLabel,schema) {
	var fields = ludi_forms_util_StructuredJQuery.getFields(this1);
	var subform = ludi_forms_Form._new(schema);
	fields.subforms.h[itemLabel] = subform;
	var control = fields.controls.h[itemLabel];
	if(control != null) {
		control.append(subform);
	} else {
		var itemDiv = this1.find("div.ludi-form-control-container").filter(function(index,element) {
			var jel = $(element);
			var contents = jel.contents();
			var textContent = StringTools.trim(contents.filter(function(i,e) {
				return e.nodeType == 3;
			}).text());
			return textContent == itemLabel;
		});
		if(itemDiv.length > 0) {
			itemDiv.append(subform);
		} else {
			console.log("src/ludi/forms/Form.hx:386:","Warning: Could not find control container for label \"" + itemLabel + "\"");
		}
	}
	ludi_forms_util_StructuredJQuery.setFields(this1,fields);
};
ludi_forms_Form.removeSubform = function(this1,itemLabel) {
	var fields = ludi_forms_util_StructuredJQuery.getFields(this1);
	if(Object.prototype.hasOwnProperty.call(fields.subforms.h,itemLabel)) {
		fields.subforms.h[itemLabel].remove();
		var _this = fields.subforms;
		if(Object.prototype.hasOwnProperty.call(_this.h,itemLabel)) {
			delete(_this.h[itemLabel]);
		}
		ludi_forms_util_StructuredJQuery.setFields(this1,fields);
	}
};
ludi_forms_Form.getValues = function(this1) {
	var fields = ludi_forms_util_StructuredJQuery.getFields(this1);
	var values = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = fields.schema;
	while(_g < _g1.length) {
		var item = [_g1[_g]];
		++_g;
		var control = fields.controls.h[item[0].label];
		if(control != null) {
			var renderer = Lambda.find(ludi_forms_Form.renderers,(function(item) {
				return function(r) {
					return r.type == item[0].type;
				};
			})(item));
			if(renderer != null) {
				var value = renderer.getValue(this1,item[0],control);
				values.h[item[0].label] = { value : value};
			}
		}
	}
	var h = fields.subforms.h;
	var key_h = h;
	var key_keys = Object.keys(h);
	var key_length = key_keys.length;
	var key_current = 0;
	while(key_current < key_length) {
		var key = key_keys[key_current++];
		var subformValues = ludi_forms_Form.getValues(fields.subforms.h[key]);
		if(Object.prototype.hasOwnProperty.call(values.h,key)) {
			var existing = values.h[key];
			values.h[key] = { value : existing.value, subform : subformValues};
		} else {
			values.h[key] = { value : null, subform : subformValues};
		}
	}
	return values;
};
var ludi_forms_util_StructuredJQuery = {};
ludi_forms_util_StructuredJQuery.setFields = function(this1,fields) {
	this1.data("structuredFields",fields);
};
ludi_forms_util_StructuredJQuery.getFields = function(this1) {
	return this1.data("structuredFields");
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
ludi_forms_Form.renderers = [];
ludi_forms_Form.hasInitialized = false;
Main.main();
})({});
